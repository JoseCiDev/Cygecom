name: CI

on: [push]

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  build:
<<<<<<< HEAD
<<<<<<< HEAD
    runs-on: ubuntu-latest #Configura um ambiente de execução em uma máquina virtual com a última versão do Ubuntu.
=======
    runs-on: ubuntu-latest
>>>>>>> d25369a (Realizado teste de login com url de produção, quando url esta para 66 é retornado erro, verificaremos se é um bloqueio de rede ou o que esta ocorrendo.)
    services:
      cypress:
        image: brunojoao3/docker-sm:cy-sm-hkm
        options: >
          -w /cypress

      app:
        image: brunojoao3/docker-sm:php-8.3-franken
        options: >
          --tty
          -w /var/www/gerenciador-compras
          -p 8085:8085
    env:
<<<<<<< HEAD
      GH_TOKEN: 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
    #Define variáveis de ambiente.
=======
    runs-on: ubuntu-latest
    container:
      image: brunojoao3/docker-sm:php-8.3-franken    
>>>>>>> ed14dde (Ajustando CI)
=======
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
>>>>>>> d25369a (Realizado teste de login com url de produção, quando url esta para 66 é retornado erro, verificaremos se é um bloqueio de rede ou o que esta ocorrendo.)

    steps:
      - name: Repository checkout for execution environment
        uses: actions/checkout@v2

<<<<<<< HEAD
      - name: Get container names
        id: get_name
        run: |
<<<<<<< HEAD
          echo "::set-output name=app_name::$(docker ps --filter ancestor=brunojoao3/docker-sm:php-8.3-franken --format "{{.Names}}")"
          echo "::set-output name=cypress_name::$(docker ps --filter ancestor=brunojoao3/docker-sm:cy-sm-hkm --format "{{.Names}}")"
        #Obtem o nome do container app e cypress
=======
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Run commands
      run: |
        -u root --restart always --name php8.3-franken -p 8085:8085 -p 5173:5173 -v ../projects/gerenciador-compras:/var/www/gerenciador-compras -v ./dockerfiles/configs/php8.3-franken/php.ini:/usr/local/etc/php/conf.d/local.ini -v ./dockerfiles/configs/php8.3-franken/Caddyfile:/etc/caddy/Caddyfile -v caddy_data:/data -v caddy_config:/config brunojoao3/docker-sm:php-8.3-franken sh -c "sh frankenphp run --config /etc/caddy/Caddyfile"

    # Configuração e instalação das dependências da aplicação
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, dom, fileinfo, mysql
        coverage: xdebug
>>>>>>> ed14dde (Ajustando CI)

      - name: Get ip address of application
        id: get_ip
        run: echo "::set-output name=app_ip::$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${{ steps.get_name.outputs.app_name }})"

      - name: Add application entry to hosts file
        run: docker exec ${{ steps.get_name.outputs.cypress_name }} bash -c "
          echo -e '${{ steps.get_ip.outputs.app_ip }}\tgerenciador-compras.docker.local' >> /etc/hosts"
=======
          echo "::set-output name=app_name::$(/usr/bin/docker ps --filter ancestor=brunojoao3/docker-sm:php-8.3-franken --format "{{.Names}}")"
          echo "::set-output name=cypress_name::$(/usr/bin/docker ps --filter ancestor=brunojoao3/docker-sm:cy-sm-hkm --format "{{.Names}}")"
>>>>>>> d25369a (Realizado teste de login com url de produção, quando url esta para 66 é retornado erro, verificaremos se é um bloqueio de rede ou o que esta ocorrendo.)

      - name: copy project to application container
        run: docker cp . ${{ steps.get_name.outputs.app_name }}:/var/www/gerenciador-compras

      - name: Copy caddyfile to application container
        run: docker cp Caddyfile ${{ steps.get_name.outputs.app_name }}:/etc/caddy/Caddyfile

      - name: Change owner of docker socket
        run: sudo chown 1000:docker /var/run/docker.sock

      - name: Setup application
        run: |
          docker exec ${{ steps.get_name.outputs.app_name }} bash -c "
          composer install &&
          if [ ! -f .env ]; then
            cp .env.example .env
          fi &&
          php artisan key:generate &&
          echo > database/database.sqlite &&
          echo \"DB_CONNECTION=sqlite\" >> .env &&
          echo \"DB_DATABASE=database/database.sqlite\" >> .env &&
          php artisan migrate --force &&
          php artisan db:seed --force &&
          chmod -R 777 storage bootstrap/cache &&
          npm install &&
          npm run build"

      - name: Add application entry to hosts file
        run: docker exec ${{ steps.get_name.outputs.cypress_name }} bash -c "
          echo -e '${{ steps.get_ip.outputs.app_ip }}\tgerenciador-compras.docker.local' >> /etc/hosts"

      - name: Run frankenphp
        run: |
          docker exec ${{ steps.get_name.outputs.app_name }} bash -c "
          frankenphp run --config /etc/caddy/Caddyfile &"

      - name: Checkout Cypress tests
        uses: actions/checkout@v2
        with:
          repository: JoseCiDev/Cygecom
          path: cypress
          ref: feature/GC-7
          token: ${{ secrets.GH_TOKEN }}

      - name: Copy cypress directory to Docker container
        run: docker cp ./cypress ${{ steps.get_name.outputs.cypress_name }}:/

      - name: Setup Cypress tests
        run: |
          docker exec ${{ steps.get_name.outputs.cypress_name }} sh -c "
          npm install &&
          echo '{
            \"ENVIRONMENT\": \"TEST\",
            \"TEST\": {
              \"ENV\": \"1\",
              \"BASE_URL\": \"${{ secrets.TEST_BASE_URL }}\",
              \"EMAIL_ADMIN\": \"gecom_admin@essentia.com.br\",
              \"PASSWORD_ADMIN\": \"essadmin@2023\"
            }
          }' > cypress.env.json &&
          npm run login"

      - name: Run Cypress tests
        run: docker exec ${{ steps.get_name.outputs.cypress_name }} npm run login